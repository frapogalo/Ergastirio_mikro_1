1)	CPU type: MinorCPU
	Frequency: 1GHz
	Voltage Domain: 3,3V
	Cache line: 64 bytes

2)	type=MinorCPU
	p_state_clk_gate_max=1000000000000
	voltage=3.3
	cache_line_size=64

3)	Pipeline Stages: Το κάθε Pipeline Stage είναι υπεύθυνο για πράξεις όπως αποκωδικοποίηση ή εκτέλεση κάποιας εντολής, και ανάλογα, είτε στέλνει οδηγίες στο επόμενο stage εάν η λειτουργία του ήταν επιτυχής και το επόμενο στάδιο είναι έτοιμο να δεχθεί εντολές, είτε κρατάει την πληροφορία περιμένοντας μέχρι να τηρούνται οι παραπάνω προϋποθέσεις. Τα stages επικοινωνούν μεταξύ τους για 3 λόγους. Όταν στέλνουν "οδηγίες" στα επόμενα στάδια. Όταν υπάρχει κάποιο πρόβλημα στη ροή, ώστε να σταματήσουν τη ροή της πληροφορίας τα προηγούμενα στάδια. Τέλος όταν έχει γίνει κάποιο λάθος στην αλληλουχία των σταδίων. Συνήθως τα στάδια χρησιμοποιούνται σε πεντάδες με τις εξής λειτουργίες: εισαγωγή εντολής, αποκωδικοποίηση εντολής, εκτέλεση εντολής, επεξεργασία μνήμης, εγγραφή καταχωρητών.
	
	Resource Request Model: Σε αυτό το μοντέλο, τα resources αναφέρονται σε οποιοδήποτε μέρος του επεξεργαστή θέλουμε μια οδηγία να έχει πρόσβαση, όπως για παράδειγμα η πρόβλεψη κλάδου, μια μνήμη cache, κάποιος ενεργοποιητής κλπ. Το μοντέλο αυτό, όλα τα εξαρτήματα θεωρούνται να ανήκουν στη γενική κλάση resources με διαφορετικές, όμως, ιδιότητες. Σε κάθε στάδιο, μια οδηγία ζητείται από το αντίστοιχο resource. Εάν η εκτέλεση της γίνει με σωστό τρόπο, τότε μεταβαίνει στο επόμενο στάδιο. Για κάθε resource υπάρχουν 2 βασικά χαρακτηριστικά, η διεύθυνση του και η εντολή που εκτελεί. Μετά από κάθε δημιουργία ενός resource-request, αυτό μεταβαίνει στο Resource Pool, το οποίο προωθεί την πληροφορία στο κατάλληλο Resource. Κάθε Resource, μόλις λάβει εντολή, ελέγχει εάν μπορεί να την πραγματοποιήσει εκείνη τη στιγμή κι εάν είναι εφικτό, τότε δεσμεύει τον απαραίτητο χώρο που χρειάζεται και πραγματοποιεί την εργασία, στέλνοντας επιτυχές σήμα. Εάν για κάποιο λόγο η εργασία δεν εκτελεστεί με επιτυχία, τότε επιστρέφει ανεπιτυχές σήμα. 

	a)Ο επεξεργαστής TimingSimple κατάφερε να τρέξει το πρόγραμμα σε 0.36s, ενώ ο Minor σε 1.06s. 
	b)
	c)Με υποδιπλασιασμό της συχνότητας λειτουργίας και των δύο τύπων επεξεργαστών, παρατηρούμε ότι ο TimingSimple κατάφερε να τρέξει το πρόγραμμα σε 2.03s ενώ ο Minor σε 1.51s.



Resources: 
http://gem5.org/Running_gem5
http://learning.gem5.org/book/part1/example_configs.html
http://www.gem5.org/InOrder_Pipeline_Stages
http://www.gem5.org/InOrder_Resource-Request_Model
http://www.gem5.org/docs/html/minor.html
http://www.m5sim.org/SimpleCPU
